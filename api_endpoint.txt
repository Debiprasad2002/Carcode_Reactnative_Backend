Remaining Endpoint

1. Forget password 
2. Profile page  (Done)
3. Chat (done)
4. Car details update 
5. Card details delete 
6. Image upload in profile page (Done)
7. Fetch Information in Service Light Reset page (done)
8. Blog Page ( new functionality)
9. Damage Report Page 
10. Image And Comment ( Maybe not sure )
11- Registration car info 








1- The API endpoint register(GET)

http://localhost:3000/auth/register
Input Value:

The input value is a JSON object that includes:

JSON
{
    "email": "dehiprasaibedantas@gmail.com",
    "password": "password",
    "confirmPassword": "password123",
    "agreeToTerms": true
}
Use code with caution.

Output Value:

The output value is a JSON object that includes:

JSON
{
    "message": "user registered successfully"
}

 2- API Endpoint:login(GET)

The API endpoint appears to be:

http://localhost:3000/auth/login
Input Value:

The input value is a JSON object that includes:

JSON
{
    "email": "debiprasadbedantas@gmail.com",
    "password": "password123"
}
Use code with caution.

Output Value:

The output value is a JSON object that includes:

JSON
{
    "message": "Login successful",
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjo1LCJ

}

3- API Endpoint:getSolution(DTC Doctor)(GET)

The API endpoint appears to be:

http://localhost:3000/api/diagnostic/getSolution
Input Value:

The input value is a JSON object that includes:

JSON
{
    "code": "P0121"
}
Use code with caution.

Output Value:

The output value is a JSON object that includes:

JSON
{
    "message": "solution found",
    "solutions": [
        {
            "option": "The Throttle Position Sensor (TPS) is malfunctioning. You should replace it."
        },
        {
            "option": "Throttle Position (TP) Sensor Circuit might have high voltage. Inspect the related components and check for any obvious faults. Further diagnostic testing may be required."
        },
        {
            "option": "A/C High Side Temp Sensor Low Voltage. Inspect the related components and check for any obvious faults. Further diagnostic testing may be required."
        }
    ]
}



4- API Endpoint:Servicelite features getting all data from external api 

The API endpoint appears to be:(GET)

http://localhost:3000/api/vehicle-info?registrationNumber=EA65AMX
Input Value:

The input value is a query parameter:

registrationNumber=FA65AMX
Output Value:

The output value is a JSON object that includes:

JSON
{
    "registrationNumber": "FA65AMX",
    "make": "AUDI",
    "model": "A7",
    "colour": "BLACK",
    "engineCapacity": 2967,
    "yearOfManufacture": 2015,
    "vehicleAge": "9 years 2 months",
    "wheelPlan": "2 AXLE RIGID BODY",
    "dateOfLastFitnessIssued": "2024-08-25",
    "typeApproval": "",
    "co2Emissions": 142,
    "registrationPlace": "HARIDWAR",
    "taxStatus": "Taxed",
    "taxDueDate": "2025-06-01",
    "days": 200,
    "motStatus": "Valid",
    "days": 8
}

<--------------------------------------------------------------------------------------->

5-http://localhost:3000/api/view_data(GET)

INPUT - http://localhost:3000/api/view_data(GET)


OUTPUT - {
  "data": 
    {
      "ID": 22,
      "Registration": "T500TAJ",
      "Make": "Mercedes_Benz",
      "Model": "S-Class",
      "Fixed": "✔"
    },
    {
      "ID": 23,
      "Registration": "Sl70ppv",
      "Make": "Nissan",
      "Model": "Murano",
      "Fixed": "✔"
    },
    {
      "ID": 28,
      "Registration": "KW68VPC",
      "Make": "Mercedes_Benz",
      "Model": "C-Class",
      "Fixed": "✘"
    },
}


6- contact us 
http://localhost:3000/api/contact (POST)
INPUT - {
  "name": "John Doe",
  "email": "john.doe@example.com",
  "message": "Hello, I need help with my account."
}


OUTPUT - 
{
  "success": true,
  "message": "Message saved successfully."
}


// check the data base for the dtc doctor code query
SELECT description FROM fault_codes WHERE code = 'P0123';
it will show in the database 



Note - 
ist of all we need to send the Name , email and profile picture witha  single click to the database and we have to 
store the value in a table another table 
2- when we hit the chat section api then it automatically fetch the image and name from the database when we call the api or 



JWT TOOKEN - 

{
  "message": "Login successful",
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE3MzIzNzY4MjcsImV4cCI6MTczMjM4MDQyN30.qufaE85ll4TWcGauktbdlDpaecsFH5Twoyj4PNGS-38"
}eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE3MzIzNzY4MjcsImV4cCI6MTczMjM4MDQyN30.qufaE85ll4TWcGauktbdlDpaecsFH5Twoyj4PNGS-38


7- // Profile page with profile picture upload feture 
http://localhost:3000/api/profile/uploadProfile (post)
Inside the authorization enter the Bearer Token (Token that you got from the login )[Token valid for 1hr]
output - {
    "message": "Profile uploaded successfully",
    "data": {
        "name": "Debiprasad Bedanta ",
        "email": "debiprasadbedanta5@gmail.com",
        "profilePicture": "/uploads/1732614724025-Biju image 2.jpg"
    }
}


make one folder in root directoy uploads where the image will store 
Add Middlware folder in the root directory then authmiddleware.Js
then profileControllerjs
profileRoutes.Js
npm install cors
npm install multer


8 -  Fetch information in service light reset page
http://localhost:3000/api/vehicles

Endpoint: http://localhost:5000/api/vehicles
Method: GET
Query Parameters:
json
Copy code
{
  "make": "ACURA",
  "model": "CL",
  "year": "1998"
}

output
{
  "information": "Reset the coloured indicator by inserting the key..."
}



9 - Profile page name and email automatically fetched throught the jwt token 
http://localhost:3000/api/user/profile (GET)

input - authorization
          Bearer (token)

          output - {
  "message": "Profile details fetched successfully",
  "user": {
    "name": "ur name ",
    "email": "ur email ",
    "profile_picture":"ur profile /null/ profile path 
  }
}


10 - Profile page 
GET - http://localhost:3000/api/user/profile
INPUT  - Bearer token (authorization)
output - will be respective users information from users table 
name
email
profileControllerjs

POST  - http://localhost:3000/api/profile/upload-image
package - npm install formidable

input - name , email , profilepicture 
output - {
    "message": "Profile image uploaded successfully.",
    "profile_picture": "/uploads/profile_pictures/1732882893256_Stripe.jpg"
}
it will store the image in the users table at profile_picture column

11- http://localhost:3000/api/car-register(car-info registraion)(POST)
input - {
    "registration": "123ABC",
    "make": "Toyota",
    "model": "Corolla",
    "fault_code": "P0123",
    "description": "Throttle position sensor malfunction",
    "is_fixed": 1
}

output - {
    "message": "Car information registered successfully."
}


12 - http://localhost:3000/api/car-crud/update(update)PUT
input - {
    "registration": "123ABC",
    "make": "Mercedes_Benz",
    "model": "S-Class",
    "fault_code": "P010162",
    "description": "Updated description",
    "is_fixed": 1
}

output - {
  "message": "Car information updated successfully."
}

13 - http://localhost:3000/api/car-delete/delete(DELETE) optional value you can take both value for response 
input - {
    "registration": "123ABC",
    "make": "Mercedes_Benz",
    "model": "S-Class",
    "fault_code": "P010162",
    "description": "Updated description",
    "is_fixed": 1
}
output - 
{
  "message": "Car information deleted successfully."
}

OR 
 input 
 {
    "registration": "T500TAJ",
    "make": "Mercedes_Benz",
    "model": "S-Class"
}

output - {
  "message": "Car information deleted successfully."
}

here is the chat api 

14- Chat api 
1-Get api we need to fetch the infromation like name , timestamp , message from the database 
2-post api we need to submit the message in the database 
3- Recent 30 messages need to share in the screen like we need to implement the recent 30 message in from the databas 
4- We need to create new row everytime when the user hit the message .


15- http://localhost:3000/api/car-damage/add[POST]
input - 
{
    "car_id": "ABC12345",
    "userid": "A3",
    "damage_side": "Side 3",
    "damage_type": "Body",
    "damage_category": "Hood",
    "description": "hi it has been scratch an sdf sdf s dsfsf d xyz ."
}

optional|
input 
{
    "damage_type": "Body",
    "damage_category": "Rear Bumper",
    "description": "Minor scratch",
    "damage_side": "left"
}


output - {
  "message": "Car damage report added successfully."
}


16- 
package install - npm install nodemailer bcrypt crypto
forgot password api 
http://localhost:3000/api/forgot-password[POST]
input 
{
  "email": "debiprasadbedanta@gmail.com"
}

output - {
  "message": "Password reset link sent to your email."
}

then you will recieve the output of email with token 


17 - Endpoint: POST /api/reset-password[POST] write ur own token and password 
http://localhost:3000/api/reset-password
input 
{
  "resetToken": "e9324841f06fe9f5ea990c969a406e3ebcf3ebc3cb09db2a36dab0fb00372752",
  "newPassword": "new123"
}
output-
{
  "message": "Password reset successfully."
}


18 - npm install bcryptjs [OTP based featuers ]
npm install sequelize mysql2

http://localhost:3000/api/password/request-otp[POST]
input - 
{
    "email": "debiprasadbedanta@gmail.com"
}

output 
{
  "message": "OTP sent successfully."
}

http://localhost:3000/api/password/verify-otp[POST]
{
    "email": "debiprasadbedanta@gmail.com",
    "otp": "304336",
    "newPassword": "hi123"
}

output{
  "message": "Password reset successfully."
}



19 - commentby ,createdate ,fixed (Y/N) , comment information , image , cid (non mandatory ) , userid (non mandatory)
post - comment(message ) , image , commentedby , fixed (Y/N) (non mandatory)
get - coment by , cretedate , comment message , image , fixedcode 
20 - http://localhost:3000/api/car-comment/fetch[POST]
input {
  "cid": "93"
}

output - {
  "message": "Comments fetched successfully.",
  "data": [
    {
      "id": 38,
      "cid": "93",
      "comment": "Inspected live data \r\nStates incorrect key \r\nOpened key to find immo chip is missing",
      "commentby": "Jamie",
      "createdate": "2024-11-07T10:01:51.000Z",
      "userid": "7",
      "fixed_code": "Y",
      "image": "IMG20241107153123.jpg"
    }
  ]
}

http://localhost:3000/api/car-comment/add
input - Body:
Text Fields:
cid: C123
comment: Minor ssdfds cratch  os df dsfds sdf sn the left door.
commentby: Biju 
userid: U123 
fixed_code: Y 
File Field:
image: Upload an image file (optional )

output - {
    "message": "Comment added successfully.",
    "imagePath": null //if image is not there or else image path will be there 
}


21 - GET API will get recent 30 message from the database table of chat section  [name , time stamp  , message ]
POST - We will send name , message , 
post - Name , message , userid , profile_picture(Non mandatory)
get - Name  , message , userid , profile_picture 


22- Api end point 
http://localhost:3000/api/chat/fetchMessages[GET]
out put - {
  [
  {
    "id": 1,
    "name": "Biju",
    "message": "hello world everyone and i am creating this id for testing purpose only ",
    "timestamp": "2024-12-11T08:23:36.000Z",
    "userid": "11",
    "profile_picture": null
  },
  {
    "id": 2,
    "name": "Biju",
    "message": "hello world everyone and i am creating this id for testing purpose only ",
    "timestamp": "2024-12-11T08:24:48.000Z",
    "userid": "11",
    "profile_picture": "/uploads/chatimage/1733925288922-IMG_5766.JPG"
  },
  {
    "id": 3,
    "name": "Pushkar ",
    "message": "hello world everyone and i am creating this id for testing purpose only ",
    "timestamp": "2024-12-11T08:33:35.000Z",
    "userid": "12",
    "profile_picture": null
  },
  {
    "id": 4,
    "name": "Pushkar ",
    "message": "hello world everyone and i am creating this id for testing purpose only ",
    "timestamp": "2024-12-11T08:34:18.000Z",
    "userid": "12",
    "profile_picture": "/uploads/chatimage/1733925859200-Screenshot_2023-06-01-23-52-47-19_e2d5b3f32b79de1d45acd1fad96fbb0f.jpg"
  }
]
}

http://localhost:3000/api/chat/sendMessage [POST]
input {
  name
  message
  userid
  profile_picture(Non mandatory)
}


23 - BLOG Page functionality
Add the blog 
http://localhost:3000/api/blogs/add [POST]
form data
input {
  title
  content
  image
}

output 
  {
    "message": "Blog added successfully.",
    "blogId": 2
}

update the blog feature 

  http://localhost:3000/api/blogs/update [PUT]
input {
  id = mandatory
  other non mandatory 
}

output {
  {
  "message": "Blog updated successfully."
}


delete the blog feature 
 http://localhost:3000/api/blogs/delete

 input { JSON
  id = 1
 }
output {
  {
  "message": "Blog deleted successfully."
}

Read the blog page 
http://localhost:3000/api/blogs/get

output {
   {
    "id": 2,
    "title": "this is a blog one ",
    "content": "This is blog one content made for testing purpose only ",
    "image": "/uploads/blogimage/image-1734009820679-344233515.JPG"
  },
}
}
}




24 - fault_code(admin pannel api )
http://localhost:3000/api/fault-codes [POST] [ADD ]

input {
  {
  "code": "P1234",
  "description": "Test fault code description"
}


output {

  {
  "message": "Fault code added successfully."
}

http://localhost:3000/api/fault-codes [PUT] [update ]


{
  "id": 1,
  "code": "P1234",
  "description": "Updated fault code description"
}
Output:
json
Copy code
{
  "message": "Fault code updated successfully."
}


http://localhost:3000/api/fault-codes [DELETE] [Delete ]

{
  "id": 1
}
Output:
json
Copy code
{
  "message": "Fault code deleted successfully."
}

}
}

ADMIN PANEL
Admin panel:
1. User management
2. fault code management/edit
3. Blog editor/add
4. Chat management
5. Contact us inbox/reply


1- Fault code management
create 
Edit 
Delete 
2- Blog completed
CRUD opeartion 
3- Chat mangement 



<------------------------------------------------------------------------------------------------------------>
DATABASE NEW TABLE LIST 
DATABASE NAME - car_info
1- blogs
2- car_damage_report
3- chat_screen_message
4- contact_message
5 - users
6



